// Code generated by MockGen. DO NOT EDIT.
// Source: member/internal/repo (interfaces: MemberRepoImply)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	entities "member/internal/entities"
	reflect "reflect"
	time "time"

	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockMemberRepoImply is a mock of MemberRepoImply interface.
type MockMemberRepoImply struct {
	ctrl     *gomock.Controller
	recorder *MockMemberRepoImplyMockRecorder
}

// MockMemberRepoImplyMockRecorder is the mock recorder for MockMemberRepoImply.
type MockMemberRepoImplyMockRecorder struct {
	mock *MockMemberRepoImply
}

// NewMockMemberRepoImply creates a new mock instance.
func NewMockMemberRepoImply(ctrl *gomock.Controller) *MockMemberRepoImply {
	mock := &MockMemberRepoImply{ctrl: ctrl}
	mock.recorder = &MockMemberRepoImplyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMemberRepoImply) EXPECT() *MockMemberRepoImplyMockRecorder {
	return m.recorder
}

// AddBillingAddress mocks base method.
func (m *MockMemberRepoImply) AddBillingAddress(arg0 *gin.Context, arg1 uuid.UUID, arg2 entities.BillingAddress) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBillingAddress", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddBillingAddress indicates an expected call of AddBillingAddress.
func (mr *MockMemberRepoImplyMockRecorder) AddBillingAddress(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBillingAddress", reflect.TypeOf((*MockMemberRepoImply)(nil).AddBillingAddress), arg0, arg1, arg2)
}

// AddMemberStoresById mocks base method.
func (m *MockMemberRepoImply) AddMemberStoresById(arg0 *gin.Context, arg1 uuid.UUID, arg2 []uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMemberStoresById", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddMemberStoresById indicates an expected call of AddMemberStoresById.
func (mr *MockMemberRepoImplyMockRecorder) AddMemberStoresById(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMemberStoresById", reflect.TypeOf((*MockMemberRepoImply)(nil).AddMemberStoresById), arg0, arg1, arg2)
}

// BillingAddressExists mocks base method.
func (m *MockMemberRepoImply) BillingAddressExists(arg0 *gin.Context, arg1 uuid.UUID, arg2 entities.BillingAddress) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BillingAddressExists", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BillingAddressExists indicates an expected call of BillingAddressExists.
func (mr *MockMemberRepoImplyMockRecorder) BillingAddressExists(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BillingAddressExists", reflect.TypeOf((*MockMemberRepoImply)(nil).BillingAddressExists), arg0, arg1, arg2)
}

// CheckBillingAddressRelation mocks base method.
func (m *MockMemberRepoImply) CheckBillingAddressRelation(arg0 context.Context, arg1, arg2 uuid.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckBillingAddressRelation", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckBillingAddressRelation indicates an expected call of CheckBillingAddressRelation.
func (mr *MockMemberRepoImplyMockRecorder) CheckBillingAddressRelation(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckBillingAddressRelation", reflect.TypeOf((*MockMemberRepoImply)(nil).CheckBillingAddressRelation), arg0, arg1, arg2)
}

// CheckCancellationEnabled mocks base method.
func (m *MockMemberRepoImply) CheckCancellationEnabled(arg0 *gin.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckCancellationEnabled", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckCancellationEnabled indicates an expected call of CheckCancellationEnabled.
func (mr *MockMemberRepoImplyMockRecorder) CheckCancellationEnabled(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckCancellationEnabled", reflect.TypeOf((*MockMemberRepoImply)(nil).CheckCancellationEnabled), arg0, arg1)
}

// CheckEmailExists mocks base method.
func (m *MockMemberRepoImply) CheckEmailExists(arg0 context.Context, arg1, arg2 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckEmailExists", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckEmailExists indicates an expected call of CheckEmailExists.
func (mr *MockMemberRepoImplyMockRecorder) CheckEmailExists(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckEmailExists", reflect.TypeOf((*MockMemberRepoImply)(nil).CheckEmailExists), arg0, arg1, arg2)
}

// CheckEmailForMemberID mocks base method.
func (m *MockMemberRepoImply) CheckEmailForMemberID(arg0 *gin.Context, arg1 uuid.UUID, arg2 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckEmailForMemberID", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckEmailForMemberID indicates an expected call of CheckEmailForMemberID.
func (mr *MockMemberRepoImplyMockRecorder) CheckEmailForMemberID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckEmailForMemberID", reflect.TypeOf((*MockMemberRepoImply)(nil).CheckEmailForMemberID), arg0, arg1, arg2)
}

// CheckEmailProviderRelation mocks base method.
func (m *MockMemberRepoImply) CheckEmailProviderRelation(arg0 *gin.Context, arg1, arg2 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckEmailProviderRelation", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckEmailProviderRelation indicates an expected call of CheckEmailProviderRelation.
func (mr *MockMemberRepoImplyMockRecorder) CheckEmailProviderRelation(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckEmailProviderRelation", reflect.TypeOf((*MockMemberRepoImply)(nil).CheckEmailProviderRelation), arg0, arg1, arg2)
}

// CheckIfMemberSubscribedToFreePlan mocks base method.
func (m *MockMemberRepoImply) CheckIfMemberSubscribedToFreePlan(arg0 *gin.Context, arg1 uuid.UUID, arg2 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckIfMemberSubscribedToFreePlan", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckIfMemberSubscribedToFreePlan indicates an expected call of CheckIfMemberSubscribedToFreePlan.
func (mr *MockMemberRepoImplyMockRecorder) CheckIfMemberSubscribedToFreePlan(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckIfMemberSubscribedToFreePlan", reflect.TypeOf((*MockMemberRepoImply)(nil).CheckIfMemberSubscribedToFreePlan), arg0, arg1, arg2)
}

// CheckIfPayoutGatewayExists mocks base method.
func (m *MockMemberRepoImply) CheckIfPayoutGatewayExists(arg0 *gin.Context, arg1 int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckIfPayoutGatewayExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckIfPayoutGatewayExists indicates an expected call of CheckIfPayoutGatewayExists.
func (mr *MockMemberRepoImplyMockRecorder) CheckIfPayoutGatewayExists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckIfPayoutGatewayExists", reflect.TypeOf((*MockMemberRepoImply)(nil).CheckIfPayoutGatewayExists), arg0, arg1)
}

// CheckLanguageExist mocks base method.
func (m *MockMemberRepoImply) CheckLanguageExist(arg0 *gin.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckLanguageExist", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckLanguageExist indicates an expected call of CheckLanguageExist.
func (mr *MockMemberRepoImplyMockRecorder) CheckLanguageExist(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckLanguageExist", reflect.TypeOf((*MockMemberRepoImply)(nil).CheckLanguageExist), arg0, arg1)
}

// CheckMemberPartner mocks base method.
func (m *MockMemberRepoImply) CheckMemberPartner(arg0 *gin.Context, arg1 uuid.UUID, arg2 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckMemberPartner", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckMemberPartner indicates an expected call of CheckMemberPartner.
func (mr *MockMemberRepoImplyMockRecorder) CheckMemberPartner(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckMemberPartner", reflect.TypeOf((*MockMemberRepoImply)(nil).CheckMemberPartner), arg0, arg1, arg2)
}

// CheckNonExistingMemberStores mocks base method.
func (m *MockMemberRepoImply) CheckNonExistingMemberStores(arg0 *gin.Context, arg1 uuid.UUID, arg2 []uuid.UUID) ([]uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckNonExistingMemberStores", arg0, arg1, arg2)
	ret0, _ := ret[0].([]uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckNonExistingMemberStores indicates an expected call of CheckNonExistingMemberStores.
func (mr *MockMemberRepoImplyMockRecorder) CheckNonExistingMemberStores(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckNonExistingMemberStores", reflect.TypeOf((*MockMemberRepoImply)(nil).CheckNonExistingMemberStores), arg0, arg1, arg2)
}

// CheckPartnerIDExists mocks base method.
func (m *MockMemberRepoImply) CheckPartnerIDExists(arg0 *gin.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPartnerIDExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckPartnerIDExists indicates an expected call of CheckPartnerIDExists.
func (mr *MockMemberRepoImplyMockRecorder) CheckPartnerIDExists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPartnerIDExists", reflect.TypeOf((*MockMemberRepoImply)(nil).CheckPartnerIDExists), arg0, arg1)
}

// CheckPartnerStores mocks base method.
func (m *MockMemberRepoImply) CheckPartnerStores(arg0 context.Context, arg1 uuid.UUID, arg2 []uuid.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPartnerStores", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckPartnerStores indicates an expected call of CheckPartnerStores.
func (mr *MockMemberRepoImplyMockRecorder) CheckPartnerStores(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPartnerStores", reflect.TypeOf((*MockMemberRepoImply)(nil).CheckPartnerStores), arg0, arg1, arg2)
}

// CheckResetKeyMatch mocks base method.
func (m *MockMemberRepoImply) CheckResetKeyMatch(arg0 context.Context, arg1 uuid.UUID, arg2 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckResetKeyMatch", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckResetKeyMatch indicates an expected call of CheckResetKeyMatch.
func (mr *MockMemberRepoImplyMockRecorder) CheckResetKeyMatch(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckResetKeyMatch", reflect.TypeOf((*MockMemberRepoImply)(nil).CheckResetKeyMatch), arg0, arg1, arg2)
}

// CheckStoreNameExistsAndReturnIDs mocks base method.
func (m *MockMemberRepoImply) CheckStoreNameExistsAndReturnIDs(arg0 context.Context, arg1 []string) (bool, []uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckStoreNameExistsAndReturnIDs", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].([]uuid.UUID)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CheckStoreNameExistsAndReturnIDs indicates an expected call of CheckStoreNameExistsAndReturnIDs.
func (mr *MockMemberRepoImplyMockRecorder) CheckStoreNameExistsAndReturnIDs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckStoreNameExistsAndReturnIDs", reflect.TypeOf((*MockMemberRepoImply)(nil).CheckStoreNameExistsAndReturnIDs), arg0, arg1)
}

// CheckSubscriptionExistenceAndStatusForCheckout mocks base method.
func (m *MockMemberRepoImply) CheckSubscriptionExistenceAndStatusForCheckout(arg0 *gin.Context, arg1 string) (bool, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckSubscriptionExistenceAndStatusForCheckout", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CheckSubscriptionExistenceAndStatusForCheckout indicates an expected call of CheckSubscriptionExistenceAndStatusForCheckout.
func (mr *MockMemberRepoImplyMockRecorder) CheckSubscriptionExistenceAndStatusForCheckout(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckSubscriptionExistenceAndStatusForCheckout", reflect.TypeOf((*MockMemberRepoImply)(nil).CheckSubscriptionExistenceAndStatusForCheckout), arg0, arg1)
}

// CheckSubscriptionExistenceAndStatusForRenewal mocks base method.
func (m *MockMemberRepoImply) CheckSubscriptionExistenceAndStatusForRenewal(arg0 *gin.Context, arg1 string) (bool, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckSubscriptionExistenceAndStatusForRenewal", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CheckSubscriptionExistenceAndStatusForRenewal indicates an expected call of CheckSubscriptionExistenceAndStatusForRenewal.
func (mr *MockMemberRepoImplyMockRecorder) CheckSubscriptionExistenceAndStatusForRenewal(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckSubscriptionExistenceAndStatusForRenewal", reflect.TypeOf((*MockMemberRepoImply)(nil).CheckSubscriptionExistenceAndStatusForRenewal), arg0, arg1)
}

// CountPrimaryBillingAddresses mocks base method.
func (m *MockMemberRepoImply) CountPrimaryBillingAddresses(arg0 *gin.Context, arg1 uuid.UUID) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountPrimaryBillingAddresses", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountPrimaryBillingAddresses indicates an expected call of CountPrimaryBillingAddresses.
func (mr *MockMemberRepoImplyMockRecorder) CountPrimaryBillingAddresses(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountPrimaryBillingAddresses", reflect.TypeOf((*MockMemberRepoImply)(nil).CountPrimaryBillingAddresses), arg0, arg1)
}

// CountTotalAddressesForMember mocks base method.
func (m *MockMemberRepoImply) CountTotalAddressesForMember(arg0 *gin.Context, arg1 uuid.UUID) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountTotalAddressesForMember", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountTotalAddressesForMember indicates an expected call of CountTotalAddressesForMember.
func (mr *MockMemberRepoImplyMockRecorder) CountTotalAddressesForMember(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountTotalAddressesForMember", reflect.TypeOf((*MockMemberRepoImply)(nil).CountTotalAddressesForMember), arg0, arg1)
}

// CountryExists mocks base method.
func (m *MockMemberRepoImply) CountryExists(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountryExists", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountryExists indicates an expected call of CountryExists.
func (mr *MockMemberRepoImplyMockRecorder) CountryExists(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountryExists", reflect.TypeOf((*MockMemberRepoImply)(nil).CountryExists), arg0)
}

// DecryptPaymentData mocks base method.
func (m *MockMemberRepoImply) DecryptPaymentData(arg0 *gin.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecryptPaymentData", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecryptPaymentData indicates an expected call of DecryptPaymentData.
func (mr *MockMemberRepoImplyMockRecorder) DecryptPaymentData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecryptPaymentData", reflect.TypeOf((*MockMemberRepoImply)(nil).DecryptPaymentData), arg0, arg1)
}

// DeleteBillingAddress mocks base method.
func (m *MockMemberRepoImply) DeleteBillingAddress(arg0 *gin.Context, arg1, arg2 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBillingAddress", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBillingAddress indicates an expected call of DeleteBillingAddress.
func (mr *MockMemberRepoImplyMockRecorder) DeleteBillingAddress(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBillingAddress", reflect.TypeOf((*MockMemberRepoImply)(nil).DeleteBillingAddress), arg0, arg1, arg2)
}

// DeleteMember mocks base method.
func (m *MockMemberRepoImply) DeleteMember(arg0 *gin.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMember", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMember indicates an expected call of DeleteMember.
func (mr *MockMemberRepoImplyMockRecorder) DeleteMember(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMember", reflect.TypeOf((*MockMemberRepoImply)(nil).DeleteMember), arg0, arg1)
}

// GetAllBillingAddresses mocks base method.
func (m *MockMemberRepoImply) GetAllBillingAddresses(arg0 context.Context, arg1 uuid.UUID) ([]entities.BillingAddress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllBillingAddresses", arg0, arg1)
	ret0, _ := ret[0].([]entities.BillingAddress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllBillingAddresses indicates an expected call of GetAllBillingAddresses.
func (mr *MockMemberRepoImplyMockRecorder) GetAllBillingAddresses(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllBillingAddresses", reflect.TypeOf((*MockMemberRepoImply)(nil).GetAllBillingAddresses), arg0, arg1)
}

// GetBasicMemberDetailsByEmail mocks base method.
func (m *MockMemberRepoImply) GetBasicMemberDetailsByEmail(arg0 string, arg1 entities.MemberPayload, arg2 context.Context) (entities.BasicMemberData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBasicMemberDetailsByEmail", arg0, arg1, arg2)
	ret0, _ := ret[0].(entities.BasicMemberData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBasicMemberDetailsByEmail indicates an expected call of GetBasicMemberDetailsByEmail.
func (mr *MockMemberRepoImplyMockRecorder) GetBasicMemberDetailsByEmail(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBasicMemberDetailsByEmail", reflect.TypeOf((*MockMemberRepoImply)(nil).GetBasicMemberDetailsByEmail), arg0, arg1, arg2)
}

// GetBillingAddressByID mocks base method.
func (m *MockMemberRepoImply) GetBillingAddressByID(arg0 context.Context, arg1 uuid.UUID) (*entities.BillingAddress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBillingAddressByID", arg0, arg1)
	ret0, _ := ret[0].(*entities.BillingAddress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBillingAddressByID indicates an expected call of GetBillingAddressByID.
func (mr *MockMemberRepoImplyMockRecorder) GetBillingAddressByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBillingAddressByID", reflect.TypeOf((*MockMemberRepoImply)(nil).GetBillingAddressByID), arg0, arg1)
}

// GetBillingAddressCountForMember mocks base method.
func (m *MockMemberRepoImply) GetBillingAddressCountForMember(arg0 *gin.Context, arg1 uuid.UUID) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBillingAddressCountForMember", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBillingAddressCountForMember indicates an expected call of GetBillingAddressCountForMember.
func (mr *MockMemberRepoImplyMockRecorder) GetBillingAddressCountForMember(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBillingAddressCountForMember", reflect.TypeOf((*MockMemberRepoImply)(nil).GetBillingAddressCountForMember), arg0, arg1)
}

// GetFilteredRecordCount mocks base method.
func (m *MockMemberRepoImply) GetFilteredRecordCount(arg0 context.Context, arg1 entities.Params) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilteredRecordCount", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilteredRecordCount indicates an expected call of GetFilteredRecordCount.
func (mr *MockMemberRepoImplyMockRecorder) GetFilteredRecordCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilteredRecordCount", reflect.TypeOf((*MockMemberRepoImply)(nil).GetFilteredRecordCount), arg0, arg1)
}

// GetMaxSubscriptionLimitForID mocks base method.
func (m *MockMemberRepoImply) GetMaxSubscriptionLimitForID(arg0 *gin.Context, arg1 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaxSubscriptionLimitForID", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMaxSubscriptionLimitForID indicates an expected call of GetMaxSubscriptionLimitForID.
func (mr *MockMemberRepoImplyMockRecorder) GetMaxSubscriptionLimitForID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaxSubscriptionLimitForID", reflect.TypeOf((*MockMemberRepoImply)(nil).GetMaxSubscriptionLimitForID), arg0, arg1)
}

// GetMemberByID mocks base method.
func (m *MockMemberRepoImply) GetMemberByID(arg0 context.Context, arg1 uuid.UUID) (entities.MemberByID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMemberByID", arg0, arg1)
	ret0, _ := ret[0].(entities.MemberByID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMemberByID indicates an expected call of GetMemberByID.
func (mr *MockMemberRepoImplyMockRecorder) GetMemberByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemberByID", reflect.TypeOf((*MockMemberRepoImply)(nil).GetMemberByID), arg0, arg1)
}

// GetMemberRecordCount mocks base method.
func (m *MockMemberRepoImply) GetMemberRecordCount(arg0 context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMemberRecordCount", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMemberRecordCount indicates an expected call of GetMemberRecordCount.
func (mr *MockMemberRepoImplyMockRecorder) GetMemberRecordCount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemberRecordCount", reflect.TypeOf((*MockMemberRepoImply)(nil).GetMemberRecordCount), arg0)
}

// GetPartnerIDByMemberID mocks base method.
func (m *MockMemberRepoImply) GetPartnerIDByMemberID(arg0 context.Context, arg1 uuid.UUID) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPartnerIDByMemberID", arg0, arg1)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPartnerIDByMemberID indicates an expected call of GetPartnerIDByMemberID.
func (mr *MockMemberRepoImplyMockRecorder) GetPartnerIDByMemberID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPartnerIDByMemberID", reflect.TypeOf((*MockMemberRepoImply)(nil).GetPartnerIDByMemberID), arg0, arg1)
}

// GetPasswordHash mocks base method.
func (m *MockMemberRepoImply) GetPasswordHash(arg0 context.Context, arg1 uuid.UUID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPasswordHash", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPasswordHash indicates an expected call of GetPasswordHash.
func (mr *MockMemberRepoImplyMockRecorder) GetPasswordHash(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPasswordHash", reflect.TypeOf((*MockMemberRepoImply)(nil).GetPasswordHash), arg0, arg1)
}

// GetPaymentDetailsByPartnerAndGateway mocks base method.
func (m *MockMemberRepoImply) GetPaymentDetailsByPartnerAndGateway(arg0 context.Context, arg1 string, arg2 int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentDetailsByPartnerAndGateway", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentDetailsByPartnerAndGateway indicates an expected call of GetPaymentDetailsByPartnerAndGateway.
func (mr *MockMemberRepoImplyMockRecorder) GetPaymentDetailsByPartnerAndGateway(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentDetailsByPartnerAndGateway", reflect.TypeOf((*MockMemberRepoImply)(nil).GetPaymentDetailsByPartnerAndGateway), arg0, arg1, arg2)
}

// GetResetKey mocks base method.
func (m *MockMemberRepoImply) GetResetKey(arg0 context.Context, arg1 uuid.UUID) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResetKey", arg0, arg1)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetResetKey indicates an expected call of GetResetKey.
func (mr *MockMemberRepoImplyMockRecorder) GetResetKey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResetKey", reflect.TypeOf((*MockMemberRepoImply)(nil).GetResetKey), arg0, arg1)
}

// GetStoreIDByCustomName mocks base method.
func (m *MockMemberRepoImply) GetStoreIDByCustomName(arg0 context.Context, arg1 []string) ([]uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoreIDByCustomName", arg0, arg1)
	ret0, _ := ret[0].([]uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoreIDByCustomName indicates an expected call of GetStoreIDByCustomName.
func (mr *MockMemberRepoImplyMockRecorder) GetStoreIDByCustomName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoreIDByCustomName", reflect.TypeOf((*MockMemberRepoImply)(nil).GetStoreIDByCustomName), arg0, arg1)
}

// GetStoreIDsByPartnerID mocks base method.
func (m *MockMemberRepoImply) GetStoreIDsByPartnerID(arg0 context.Context, arg1 uuid.UUID) ([]uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoreIDsByPartnerID", arg0, arg1)
	ret0, _ := ret[0].([]uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoreIDsByPartnerID indicates an expected call of GetStoreIDsByPartnerID.
func (mr *MockMemberRepoImplyMockRecorder) GetStoreIDsByPartnerID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoreIDsByPartnerID", reflect.TypeOf((*MockMemberRepoImply)(nil).GetStoreIDsByPartnerID), arg0, arg1)
}

// GetSubscriptionCountForLastYear mocks base method.
func (m *MockMemberRepoImply) GetSubscriptionCountForLastYear(arg0 *gin.Context, arg1 uuid.UUID, arg2 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptionCountForLastYear", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptionCountForLastYear indicates an expected call of GetSubscriptionCountForLastYear.
func (mr *MockMemberRepoImplyMockRecorder) GetSubscriptionCountForLastYear(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionCountForLastYear", reflect.TypeOf((*MockMemberRepoImply)(nil).GetSubscriptionCountForLastYear), arg0, arg1, arg2)
}

// GetSubscriptionIDByMemberSubscriptionID mocks base method.
func (m *MockMemberRepoImply) GetSubscriptionIDByMemberSubscriptionID(arg0 context.Context, arg1 string) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptionIDByMemberSubscriptionID", arg0, arg1)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptionIDByMemberSubscriptionID indicates an expected call of GetSubscriptionIDByMemberSubscriptionID.
func (mr *MockMemberRepoImplyMockRecorder) GetSubscriptionIDByMemberSubscriptionID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionIDByMemberSubscriptionID", reflect.TypeOf((*MockMemberRepoImply)(nil).GetSubscriptionIDByMemberSubscriptionID), arg0, arg1)
}

// GetSubscriptionRecordCount mocks base method.
func (m *MockMemberRepoImply) GetSubscriptionRecordCount(arg0 context.Context, arg1 uuid.UUID) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptionRecordCount", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptionRecordCount indicates an expected call of GetSubscriptionRecordCount.
func (mr *MockMemberRepoImplyMockRecorder) GetSubscriptionRecordCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionRecordCount", reflect.TypeOf((*MockMemberRepoImply)(nil).GetSubscriptionRecordCount), arg0, arg1)
}

// GetSubscriptionStatusName mocks base method.
func (m *MockMemberRepoImply) GetSubscriptionStatusName(arg0 *gin.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptionStatusName", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptionStatusName indicates an expected call of GetSubscriptionStatusName.
func (mr *MockMemberRepoImplyMockRecorder) GetSubscriptionStatusName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionStatusName", reflect.TypeOf((*MockMemberRepoImply)(nil).GetSubscriptionStatusName), arg0, arg1)
}

// HandleSubscriptionCancellation mocks base method.
func (m *MockMemberRepoImply) HandleSubscriptionCancellation(arg0 context.Context, arg1 uuid.UUID, arg2 entities.CancelSubscription) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleSubscriptionCancellation", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleSubscriptionCancellation indicates an expected call of HandleSubscriptionCancellation.
func (mr *MockMemberRepoImplyMockRecorder) HandleSubscriptionCancellation(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleSubscriptionCancellation", reflect.TypeOf((*MockMemberRepoImply)(nil).HandleSubscriptionCancellation), arg0, arg1, arg2)
}

// HandleSubscriptionCheckout mocks base method.
func (m *MockMemberRepoImply) HandleSubscriptionCheckout(arg0 context.Context, arg1 uuid.UUID, arg2 entities.CheckoutSubscription) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleSubscriptionCheckout", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleSubscriptionCheckout indicates an expected call of HandleSubscriptionCheckout.
func (mr *MockMemberRepoImplyMockRecorder) HandleSubscriptionCheckout(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleSubscriptionCheckout", reflect.TypeOf((*MockMemberRepoImply)(nil).HandleSubscriptionCheckout), arg0, arg1, arg2)
}

// HandleSubscriptionRenewal mocks base method.
func (m *MockMemberRepoImply) HandleSubscriptionRenewal(arg0 context.Context, arg1 uuid.UUID, arg2 entities.SubscriptionRenewal) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleSubscriptionRenewal", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleSubscriptionRenewal indicates an expected call of HandleSubscriptionRenewal.
func (mr *MockMemberRepoImplyMockRecorder) HandleSubscriptionRenewal(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleSubscriptionRenewal", reflect.TypeOf((*MockMemberRepoImply)(nil).HandleSubscriptionRenewal), arg0, arg1, arg2)
}

// HasPrimaryBilling mocks base method.
func (m *MockMemberRepoImply) HasPrimaryBilling(arg0 *gin.Context, arg1 uuid.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasPrimaryBilling", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasPrimaryBilling indicates an expected call of HasPrimaryBilling.
func (mr *MockMemberRepoImplyMockRecorder) HasPrimaryBilling(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasPrimaryBilling", reflect.TypeOf((*MockMemberRepoImply)(nil).HasPrimaryBilling), arg0, arg1)
}

// HasProductsReleaseEndDateGreaterThanToday mocks base method.
func (m *MockMemberRepoImply) HasProductsReleaseEndDateGreaterThanToday(arg0 *gin.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasProductsReleaseEndDateGreaterThanToday", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasProductsReleaseEndDateGreaterThanToday indicates an expected call of HasProductsReleaseEndDateGreaterThanToday.
func (mr *MockMemberRepoImplyMockRecorder) HasProductsReleaseEndDateGreaterThanToday(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasProductsReleaseEndDateGreaterThanToday", reflect.TypeOf((*MockMemberRepoImply)(nil).HasProductsReleaseEndDateGreaterThanToday), arg0, arg1)
}

// HasSubscribedToOneTimePlan mocks base method.
func (m *MockMemberRepoImply) HasSubscribedToOneTimePlan(arg0 *gin.Context, arg1 uuid.UUID, arg2 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasSubscribedToOneTimePlan", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasSubscribedToOneTimePlan indicates an expected call of HasSubscribedToOneTimePlan.
func (mr *MockMemberRepoImplyMockRecorder) HasSubscribedToOneTimePlan(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasSubscribedToOneTimePlan", reflect.TypeOf((*MockMemberRepoImply)(nil).HasSubscribedToOneTimePlan), arg0, arg1, arg2)
}

// InitiatePasswordReset mocks base method.
func (m *MockMemberRepoImply) InitiatePasswordReset(arg0 *gin.Context, arg1 uuid.UUID, arg2 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitiatePasswordReset", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitiatePasswordReset indicates an expected call of InitiatePasswordReset.
func (mr *MockMemberRepoImplyMockRecorder) InitiatePasswordReset(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitiatePasswordReset", reflect.TypeOf((*MockMemberRepoImply)(nil).InitiatePasswordReset), arg0, arg1, arg2)
}

// IsActive mocks base method.
func (m *MockMemberRepoImply) IsActive(arg0 *gin.Context, arg1 uuid.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsActive", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsActive indicates an expected call of IsActive.
func (mr *MockMemberRepoImplyMockRecorder) IsActive(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsActive", reflect.TypeOf((*MockMemberRepoImply)(nil).IsActive), arg0, arg1)
}

// IsDeleted mocks base method.
func (m *MockMemberRepoImply) IsDeleted(arg0 *gin.Context, arg1 uuid.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDeleted", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsDeleted indicates an expected call of IsDeleted.
func (mr *MockMemberRepoImplyMockRecorder) IsDeleted(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDeleted", reflect.TypeOf((*MockMemberRepoImply)(nil).IsDeleted), arg0, arg1)
}

// IsFreeSubscription mocks base method.
func (m *MockMemberRepoImply) IsFreeSubscription(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsFreeSubscription", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsFreeSubscription indicates an expected call of IsFreeSubscription.
func (mr *MockMemberRepoImplyMockRecorder) IsFreeSubscription(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFreeSubscription", reflect.TypeOf((*MockMemberRepoImply)(nil).IsFreeSubscription), arg0, arg1)
}

// IsMemberExist mocks base method.
func (m *MockMemberRepoImply) IsMemberExist(arg0 context.Context, arg1 uuid.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsMemberExist", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsMemberExist indicates an expected call of IsMemberExist.
func (mr *MockMemberRepoImplyMockRecorder) IsMemberExist(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsMemberExist", reflect.TypeOf((*MockMemberRepoImply)(nil).IsMemberExist), arg0, arg1)
}

// IsMemberExists mocks base method.
func (m *MockMemberRepoImply) IsMemberExists(arg0 uuid.UUID, arg1 context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsMemberExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsMemberExists indicates an expected call of IsMemberExists.
func (mr *MockMemberRepoImplyMockRecorder) IsMemberExists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsMemberExists", reflect.TypeOf((*MockMemberRepoImply)(nil).IsMemberExists), arg0, arg1)
}

// IsMemberRelatedToSubscription mocks base method.
func (m *MockMemberRepoImply) IsMemberRelatedToSubscription(arg0 *gin.Context, arg1 uuid.UUID, arg2 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsMemberRelatedToSubscription", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsMemberRelatedToSubscription indicates an expected call of IsMemberRelatedToSubscription.
func (mr *MockMemberRepoImplyMockRecorder) IsMemberRelatedToSubscription(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsMemberRelatedToSubscription", reflect.TypeOf((*MockMemberRepoImply)(nil).IsMemberRelatedToSubscription), arg0, arg1, arg2)
}

// IsMemberSubscribedToFreePlan mocks base method.
func (m *MockMemberRepoImply) IsMemberSubscribedToFreePlan(arg0 *gin.Context, arg1 uuid.UUID, arg2 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsMemberSubscribedToFreePlan", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsMemberSubscribedToFreePlan indicates an expected call of IsMemberSubscribedToFreePlan.
func (mr *MockMemberRepoImplyMockRecorder) IsMemberSubscribedToFreePlan(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsMemberSubscribedToFreePlan", reflect.TypeOf((*MockMemberRepoImply)(nil).IsMemberSubscribedToFreePlan), arg0, arg1, arg2)
}

// IsMemberSubscribedToPlan mocks base method.
func (m *MockMemberRepoImply) IsMemberSubscribedToPlan(arg0 *gin.Context, arg1 uuid.UUID, arg2 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsMemberSubscribedToPlan", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsMemberSubscribedToPlan indicates an expected call of IsMemberSubscribedToPlan.
func (mr *MockMemberRepoImplyMockRecorder) IsMemberSubscribedToPlan(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsMemberSubscribedToPlan", reflect.TypeOf((*MockMemberRepoImply)(nil).IsMemberSubscribedToPlan), arg0, arg1, arg2)
}

// IsPartnerIdCorrespondsToGateway mocks base method.
func (m *MockMemberRepoImply) IsPartnerIdCorrespondsToGateway(arg0 context.Context, arg1 string, arg2 int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsPartnerIdCorrespondsToGateway", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsPartnerIdCorrespondsToGateway indicates an expected call of IsPartnerIdCorrespondsToGateway.
func (mr *MockMemberRepoImplyMockRecorder) IsPartnerIdCorrespondsToGateway(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPartnerIdCorrespondsToGateway", reflect.TypeOf((*MockMemberRepoImply)(nil).IsPartnerIdCorrespondsToGateway), arg0, arg1, arg2)
}

// IsSubscriptionAboutInWarning mocks base method.
func (m *MockMemberRepoImply) IsSubscriptionAboutInWarning(arg0 context.Context, arg1 string) (bool, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSubscriptionAboutInWarning", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// IsSubscriptionAboutInWarning indicates an expected call of IsSubscriptionAboutInWarning.
func (mr *MockMemberRepoImplyMockRecorder) IsSubscriptionAboutInWarning(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSubscriptionAboutInWarning", reflect.TypeOf((*MockMemberRepoImply)(nil).IsSubscriptionAboutInWarning), arg0, arg1)
}

// IsSubscriptionFree mocks base method.
func (m *MockMemberRepoImply) IsSubscriptionFree(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSubscriptionFree", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsSubscriptionFree indicates an expected call of IsSubscriptionFree.
func (mr *MockMemberRepoImplyMockRecorder) IsSubscriptionFree(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSubscriptionFree", reflect.TypeOf((*MockMemberRepoImply)(nil).IsSubscriptionFree), arg0, arg1)
}

// IsSubscriptionInGracePeriod mocks base method.
func (m *MockMemberRepoImply) IsSubscriptionInGracePeriod(arg0 context.Context, arg1 uuid.UUID, arg2 string) (bool, time.Time, time.Time, time.Duration, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSubscriptionInGracePeriod", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(time.Time)
	ret2, _ := ret[2].(time.Time)
	ret3, _ := ret[3].(time.Duration)
	ret4, _ := ret[4].(bool)
	ret5, _ := ret[5].(error)
	return ret0, ret1, ret2, ret3, ret4, ret5
}

// IsSubscriptionInGracePeriod indicates an expected call of IsSubscriptionInGracePeriod.
func (mr *MockMemberRepoImplyMockRecorder) IsSubscriptionInGracePeriod(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSubscriptionInGracePeriod", reflect.TypeOf((*MockMemberRepoImply)(nil).IsSubscriptionInGracePeriod), arg0, arg1, arg2)
}

// Middleware mocks base method.
func (m *MockMemberRepoImply) Middleware(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Middleware", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Middleware indicates an expected call of Middleware.
func (mr *MockMemberRepoImplyMockRecorder) Middleware(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Middleware", reflect.TypeOf((*MockMemberRepoImply)(nil).Middleware), arg0, arg1)
}

// PasswordMemberRelation mocks base method.
func (m *MockMemberRepoImply) PasswordMemberRelation(arg0 *gin.Context, arg1 uuid.UUID, arg2 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PasswordMemberRelation", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PasswordMemberRelation indicates an expected call of PasswordMemberRelation.
func (mr *MockMemberRepoImplyMockRecorder) PasswordMemberRelation(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PasswordMemberRelation", reflect.TypeOf((*MockMemberRepoImply)(nil).PasswordMemberRelation), arg0, arg1, arg2)
}

// ProviderExists mocks base method.
func (m *MockMemberRepoImply) ProviderExists(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProviderExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProviderExists indicates an expected call of ProviderExists.
func (mr *MockMemberRepoImplyMockRecorder) ProviderExists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProviderExists", reflect.TypeOf((*MockMemberRepoImply)(nil).ProviderExists), arg0, arg1)
}

// RegisterMember mocks base method.
func (m *MockMemberRepoImply) RegisterMember(arg0 context.Context, arg1 entities.Member, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterMember", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterMember indicates an expected call of RegisterMember.
func (mr *MockMemberRepoImplyMockRecorder) RegisterMember(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterMember", reflect.TypeOf((*MockMemberRepoImply)(nil).RegisterMember), arg0, arg1, arg2)
}

// StateExists mocks base method.
func (m *MockMemberRepoImply) StateExists(arg0, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StateExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StateExists indicates an expected call of StateExists.
func (mr *MockMemberRepoImplyMockRecorder) StateExists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StateExists", reflect.TypeOf((*MockMemberRepoImply)(nil).StateExists), arg0, arg1)
}

// StorePartnerRelation mocks base method.
func (m *MockMemberRepoImply) StorePartnerRelation(arg0 context.Context, arg1 uuid.UUID, arg2 []uuid.UUID) (map[string]bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorePartnerRelation", arg0, arg1, arg2)
	ret0, _ := ret[0].(map[string]bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StorePartnerRelation indicates an expected call of StorePartnerRelation.
func (mr *MockMemberRepoImplyMockRecorder) StorePartnerRelation(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorePartnerRelation", reflect.TypeOf((*MockMemberRepoImply)(nil).StorePartnerRelation), arg0, arg1, arg2)
}

// SubscriptionProductSwitch mocks base method.
func (m *MockMemberRepoImply) SubscriptionProductSwitch(arg0 context.Context, arg1 uuid.UUID, arg2 entities.SwitchSubscriptions, arg3 *map[string][]string) (map[string][]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscriptionProductSwitch", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(map[string][]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubscriptionProductSwitch indicates an expected call of SubscriptionProductSwitch.
func (mr *MockMemberRepoImplyMockRecorder) SubscriptionProductSwitch(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscriptionProductSwitch", reflect.TypeOf((*MockMemberRepoImply)(nil).SubscriptionProductSwitch), arg0, arg1, arg2, arg3)
}

// UpdateBillingAddress mocks base method.
func (m *MockMemberRepoImply) UpdateBillingAddress(arg0 context.Context, arg1, arg2 uuid.UUID, arg3 entities.BillingAddress) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBillingAddress", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBillingAddress indicates an expected call of UpdateBillingAddress.
func (mr *MockMemberRepoImplyMockRecorder) UpdateBillingAddress(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBillingAddress", reflect.TypeOf((*MockMemberRepoImply)(nil).UpdateBillingAddress), arg0, arg1, arg2, arg3)
}

// UpdateMember mocks base method.
func (m *MockMemberRepoImply) UpdateMember(arg0 context.Context, arg1 uuid.UUID, arg2 entities.Member) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMember", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMember indicates an expected call of UpdateMember.
func (mr *MockMemberRepoImplyMockRecorder) UpdateMember(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMember", reflect.TypeOf((*MockMemberRepoImply)(nil).UpdateMember), arg0, arg1, arg2)
}

// UpdatePassword mocks base method.
func (m *MockMemberRepoImply) UpdatePassword(arg0 context.Context, arg1 uuid.UUID, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePassword", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePassword indicates an expected call of UpdatePassword.
func (mr *MockMemberRepoImplyMockRecorder) UpdatePassword(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePassword", reflect.TypeOf((*MockMemberRepoImply)(nil).UpdatePassword), arg0, arg1, arg2, arg3)
}

// UpdatePrimaryBillingAddressToFalseAndRandom mocks base method.
func (m *MockMemberRepoImply) UpdatePrimaryBillingAddressToFalseAndRandom(arg0 *gin.Context, arg1, arg2 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePrimaryBillingAddressToFalseAndRandom", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePrimaryBillingAddressToFalseAndRandom indicates an expected call of UpdatePrimaryBillingAddressToFalseAndRandom.
func (mr *MockMemberRepoImplyMockRecorder) UpdatePrimaryBillingAddressToFalseAndRandom(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePrimaryBillingAddressToFalseAndRandom", reflect.TypeOf((*MockMemberRepoImply)(nil).UpdatePrimaryBillingAddressToFalseAndRandom), arg0, arg1, arg2)
}

// UpdateRandomBillingAddressToPrimary mocks base method.
func (m *MockMemberRepoImply) UpdateRandomBillingAddressToPrimary(arg0 *gin.Context, arg1, arg2 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRandomBillingAddressToPrimary", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRandomBillingAddressToPrimary indicates an expected call of UpdateRandomBillingAddressToPrimary.
func (mr *MockMemberRepoImplyMockRecorder) UpdateRandomBillingAddressToPrimary(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRandomBillingAddressToPrimary", reflect.TypeOf((*MockMemberRepoImply)(nil).UpdateRandomBillingAddressToPrimary), arg0, arg1, arg2)
}

// ViewAllSubscriptions mocks base method.
func (m *MockMemberRepoImply) ViewAllSubscriptions(arg0 context.Context, arg1 uuid.UUID, arg2 entities.ReqParams, arg3 *map[string][]string) ([]entities.ListAllSubscriptions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewAllSubscriptions", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]entities.ListAllSubscriptions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewAllSubscriptions indicates an expected call of ViewAllSubscriptions.
func (mr *MockMemberRepoImplyMockRecorder) ViewAllSubscriptions(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewAllSubscriptions", reflect.TypeOf((*MockMemberRepoImply)(nil).ViewAllSubscriptions), arg0, arg1, arg2, arg3)
}

// ViewMemberProfile mocks base method.
func (m *MockMemberRepoImply) ViewMemberProfile(arg0 uuid.UUID, arg1 context.Context) (entities.MemberProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewMemberProfile", arg0, arg1)
	ret0, _ := ret[0].(entities.MemberProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewMemberProfile indicates an expected call of ViewMemberProfile.
func (mr *MockMemberRepoImplyMockRecorder) ViewMemberProfile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewMemberProfile", reflect.TypeOf((*MockMemberRepoImply)(nil).ViewMemberProfile), arg0, arg1)
}

// ViewMembers mocks base method.
func (m *MockMemberRepoImply) ViewMembers(arg0 context.Context, arg1 entities.Params) ([]entities.ViewMembers, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewMembers", arg0, arg1)
	ret0, _ := ret[0].([]entities.ViewMembers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewMembers indicates an expected call of ViewMembers.
func (mr *MockMemberRepoImplyMockRecorder) ViewMembers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewMembers", reflect.TypeOf((*MockMemberRepoImply)(nil).ViewMembers), arg0, arg1)
}
