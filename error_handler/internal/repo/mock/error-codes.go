// Code generated by MockGen. DO NOT EDIT.
// Source: localization/internal/repo (interfaces: ErrorCodesRepoImply)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	entities "localization/internal/entities"
	db "localization/internal/entities/db"
	reflect "reflect"
)

// MockErrorCodesRepoImply is a mock of ErrorCodesRepoImply interface
type MockErrorCodesRepoImply struct {
	ctrl     *gomock.Controller
	recorder *MockErrorCodesRepoImplyMockRecorder
}

// MockErrorCodesRepoImplyMockRecorder is the mock recorder for MockErrorCodesRepoImply
type MockErrorCodesRepoImplyMockRecorder struct {
	mock *MockErrorCodesRepoImply
}

// NewMockErrorCodesRepoImply creates a new mock instance
func NewMockErrorCodesRepoImply(ctrl *gomock.Controller) *MockErrorCodesRepoImply {
	mock := &MockErrorCodesRepoImply{ctrl: ctrl}
	mock.recorder = &MockErrorCodesRepoImplyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockErrorCodesRepoImply) EXPECT() *MockErrorCodesRepoImplyMockRecorder {
	return m.recorder
}

// AddEndpoint mocks base method
func (m *MockErrorCodesRepoImply) AddEndpoint(arg0 context.Context, arg1 entities.Endpoint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddEndpoint", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEndpoint indicates an expected call of AddEndpoint
func (mr *MockErrorCodesRepoImplyMockRecorder) AddEndpoint(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEndpoint", reflect.TypeOf((*MockErrorCodesRepoImply)(nil).AddEndpoint), arg0, arg1)
}

// AddTranslation mocks base method
func (m *MockErrorCodesRepoImply) AddTranslation(arg0 context.Context, arg1 []string) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTranslation", arg0, arg1)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTranslation indicates an expected call of AddTranslation
func (mr *MockErrorCodesRepoImplyMockRecorder) AddTranslation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTranslation", reflect.TypeOf((*MockErrorCodesRepoImply)(nil).AddTranslation), arg0, arg1)
}

// AppendError mocks base method
func (m *MockErrorCodesRepoImply) AppendError(arg0 context.Context, arg1, arg2, arg3 string, arg4 db.ErrorData, arg5 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppendError", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// AppendError indicates an expected call of AppendError
func (mr *MockErrorCodesRepoImplyMockRecorder) AppendError(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendError", reflect.TypeOf((*MockErrorCodesRepoImply)(nil).AppendError), arg0, arg1, arg2, arg3, arg4, arg5)
}

// GetEndpoint mocks base method
func (m *MockErrorCodesRepoImply) GetEndpoint(arg0 context.Context) ([]entities.GetEndpoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEndpoint", arg0)
	ret0, _ := ret[0].([]entities.GetEndpoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEndpoint indicates an expected call of GetEndpoint
func (mr *MockErrorCodesRepoImplyMockRecorder) GetEndpoint(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEndpoint", reflect.TypeOf((*MockErrorCodesRepoImply)(nil).GetEndpoint), arg0)
}

// GetEndpointName mocks base method
func (m *MockErrorCodesRepoImply) GetEndpointName(arg0 context.Context) (entities.ResponseData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEndpointName", arg0)
	ret0, _ := ret[0].(entities.ResponseData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEndpointName indicates an expected call of GetEndpointName
func (mr *MockErrorCodesRepoImplyMockRecorder) GetEndpointName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEndpointName", reflect.TypeOf((*MockErrorCodesRepoImply)(nil).GetEndpointName), arg0)
}

// GetError mocks base method
func (m *MockErrorCodesRepoImply) GetError(arg0, arg1, arg2, arg3, arg4 string) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetError", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetError indicates an expected call of GetError
func (mr *MockErrorCodesRepoImplyMockRecorder) GetError(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetError", reflect.TypeOf((*MockErrorCodesRepoImply)(nil).GetError), arg0, arg1, arg2, arg3, arg4)
}
